1) Our goals for this project were to create XMPP servers on our instances so that our classmates can download an XMPP client and be able to chat and message each other. Testing this was just trying to log into a server using different XMPP clients and making sure that each client was able to send and receive messages properly. This was successful as we were able to chat with one another as well as multiple test accounts. 

2) With the user population being our CIS 399 class, the effect this project will have is to allow us to quickly send messages easily to one another. This chat server could have been useful in a previous project where we needed to communicate with other groups to get their information. These servers could have saved us a lot of time because we could have been able to message each other our information with ease. Having a private chat server is a great thing for any group to have as it allows for collaboration, communication, or just enjoyable banter. Some support issues that have been raised were adding new users, deleting users, and changing usernames or passwords. There is also the major support issue of helping make sure users install and configure their XMPP client correctly. With many different clients out there and potentially inexperienced users, getting everyones client correctly configured could be an issue. There is also the issue that people may harass or annoy one another on the chat. It would be our job as admins to remove these users. 


3) The security issues with our project would have to lie within keeping usernames and passwords safe and secure. We also added the minimum number of ports to our securty groups to decrease risks associated with open ports. We added a help page that describes everyone's username and password if they forget. This is meant for the class only and we would not do this if we had to make a real server. A significant portion of our security risks lie in the security of ejabberd itself. After only opening the ports neccessary for ejabberd to function, we must rely on ejabberd to be secure. One step in ensuring ejabberd is secure is to get users to select "Require Encryption" when using our XMPP service. Since encryption is included we are relatively safe regarding our users chats. However, we also must analyze how safe ejabberd is as a server. Our analysis showed that ejabberd is a safe server. We found relatively few major issues fixed over the past couple years and could not find any major complaints about the server. We also made sure that TLS was enabled on port 5222 to add communications security and enable encryption. 


4) The work needed to be done was just creating an ejabbered module on our puppet master. We included an init.pp file in the manifests that would ensure ejabberd was installed on agents and reteive the appropriate ejabberd.cfg file. Then we created ejabberd.cfg files for each of the agents. We were able to find a "basic" configuration online and only had to make minor edits to the host and admin section, as well as a couple of port settings. After updating the agents, we had created the server through ejabberd onto our instances. Then through the web-based admin console, we were able to add users with their username and passwords. Next, we installed XMPP clients to verify the server was functioning as intended.Finally, with the server working, we added support pages for users so they would know how to use what we had created. In order to maintain this server for future use we would have to keep our instances updated and upgraded. This is especially important when it comes to keeping ejabberd up to date. The other major maintainence issue that comes to mind is updating users when an account has been added or deleted. This can be done via the admin console. We may also need to update usage guides if they become out of date. Much of the server maintainence can be automated using cron jobs with puppet. We would have to manually add/remove users and change the installation guides.

5) There is documentation on the instance webpage where there is a help page to aid those who have trouble logging into the server. to access this page enter ec2-52-39-165-25.us-west-2.compute.amazonaws.com/jabberhelp.html. We also offer specific help for users using pidgin and concinella. These pages can be found at ec2-52-39-165-25.us-west-2.compute.amazonaws.com/pidginhelp.html and ec2-52-39-165-25.us-west-2.compute.amazonaws.com/coccinellahelp.html respectively. There is also documentation on our github that describes the process in which to configure the server from a system admin's point of view and how to add and maintain users.  
