1) Our goals for this project were to create XMPP servers on our instances so that our classmates can download an XMPP client and be able to chat and message each other. Testing this was just trying to log into a server using different XMPP clients and making sure that each client was able to send and receive messages properly. This was successful as we were able to chat with one another as well as multiple test accounts. 

2) With the user population being our CIS 399 class, the effect this project will have is to allow us to quickly send messages easily just by logging onto one of our instances. This chat server could have been useful in a previous project where we needed to communicate with other groups to get their information. These servers could have saved us a lot of time because we could have been able to message each other our information with ease. Some support issues that have been raised were adding new users, deleting users, and changing usernames or passwords.


3) The security issues with our project would have to lie within keeping usernames and passwords safe and secure. We also added the minimum number of ports to our securty groups to decrease risks associated with open ports. We added a help page that describes everyone's username and password if they forget. This is meant for the class only and we would not do this if we had to make a real server. A significant portion of our security risks lie in the security of ejabberd itself. After only opening the ports neccessary for ejabberd to function, we must rely on ejabberd to be secure. One step in ensuring ejabberd is secure is to get users to select "Require Encryption" when using our XMPP service. Since encryption is included we are relatively safe regarding our users chats. However, we also must analyze how safe ejabberd is as a server. Our analysis showed that ejabberd is a safe server. We found relatively few major issues fixed over the past couple years and could not find and major complaints about the server. 


4) The work needed to be done was just creating an ejabbered module that created the server through ejabberd onto our instances. Then through the admin of the server, we were able to add users with their username and passwords. In order to maintain this server for future use we would have to update our instances such as if a new version of ejabberd has come out and updating users when an account has been added or deleted. Installation and maintenance can be automated by creating auto updates for the users and system updates.


5) There is documentation on the instance webpage where there is a help page to aid those who have trouble logging into the server. There is also documentation on our github that describes the process in which to configure the server from a system admin's point fo view and how to add and maintain users. 
