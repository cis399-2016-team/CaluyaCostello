1)concrete goals for your project, and methods of testing and verification you will apply to determine whether those goals were met 
	The goal for our project is to implement an XMPP ejabberd server on all of our instances where our class can chat and send messages to one another. We will test this /rby visiting our server hosted by the instance using apache to see if the server is functional for users. Further, /rsince this is a XMPP server for our classmates only , we will insure that all peers are able to log in and use the server. Users/r will first be prompted to download the client and then be brought to  a log in screen that requires they have a username and password with our server. If they have these requirements, they will be able to continue on to the server. If all of our classmates are able to log in with their credentials and chat with one another with their username displayed in the chat box, our goal will have been met.  

2)a discussion of your project's effect on its user population, and the user support issues it might raise 
	The project would allow all puppet agents to host their own online XMPP server where our classmates can use to talk to eachother. Our target population are our peers in cis399. We want them to be able to download the XMPP client and log onto the server  hosted by one of our instances and communicate with eachother. Support issues should be minimal as puppet will apply the same configuration to all agents. Another issue would be with adding users to the server and making sure that the users download the XMPP client correctly. Also, we need to ensure that the users obtain the correct username and password for logging in and keeping that information safe. 
	
3)a discussion of security issues relevant to your project 
	To improve our security of our files, no private data should be stored. However, we will make efforts to ensure the server is as safe and secure as possible. To do this we will hide Apache version and OS identity from errors, disable directory listing, run Apache as separate user and group...etc. These small tweaks will help protect our servers from possible harm and having usernames and passwords being leaked out.  

4)a discussion of the work needed to complete the project and what might be needed to maintain it for continued future use, and ways that installation and maintenance tasks can be automated
	In order to complete this project, we would need to create an ejabberd module that creates the XMPP server through the ejabberd.cfg file. We would then have to set up security groups on our instances so that the servers can be run on our instances.Some maintenance for future use would be adding new users to the server and making sure their information is as safe and secure as the old users' info.  Installation of the module on the agents will be fully automated, so maintenance should focus on users and their security and whether or not they can log in. Another field of maintainance required should be fixing one of the servers should they stop working or adding new users and removing undesirable users. 


5)documentation of the project, both for the system administration work involved and for your user community 
	Documentation for a project like this should be minimal. Users will intuitively know how to log in and user the chat box-like server. The only real documentation for a sysadmin would entail how to add or remove a user, or potentially tweak the server if they so desire. Documentation for how the XMPP server was implemented will be provided in the unlikely case it ever stops working. Users may need documentation on how to use their login and password, but once they have that information they shouldn't require additional assistance.  
